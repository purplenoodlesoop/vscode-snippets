{"Auto route route (Flutter)":{"prefix":"art","description":"Creates an Auto Routes route entry with a void return type.","body":["AutoRoute(","  path: '/$1',","  page: $2Page,","),","$0"],"scope":"flutter, dart"},"Auto router call (Flutter)":{"prefix":"ar","description":"Locates nearest AutoRouter in the given context and calls an arbitrary navigation method on it.","body":["AutoRouter.of(context).$0"],"scope":"flutter, dart"},"Initial changelog entry (Markdown)":{"prefix":"chngin","description":"Creates an initial Changelog entry","body":["# Changelog","All notable changes to this project will be documented in this file.","","The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),","and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).","","## [0.1.0] – $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE","### Added","- $0"],"scope":"markdown"},"New changelog entry (Markdown)":{"prefix":"chngen","description":"Creates a Changelog entry","body":["## [$1.$2.$3] – $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE","### Added","- $4","","### Changed","- $5","","### Deprecated","- $6","","### Removed","- $7","","### Fixed","- $8","","### Security","- $0"],"scope":"markdown"},"Auto route nested routes (Flutter)":{"prefix":"arts","description":"Creates an entry point for a group of nested Auto Route routes with a void return types.","body":["const AutoRoute<void> $1Routes = AutoRoute(","  path: '/${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/downcase}${2:+-}${3:/downcase}${4:/downcase}/g}',","  page: ${1/(.)(.*)/${1:/upcase}${2:/camelcase}/}RootPage,","  children: <AutoRoute<void>>[","    $0","  ],",");"],"scope":"flutter, dart"},"Arrow stateless widget child (Flutter)":{"prefix":"astlch","description":"Creates a StatelessWidget that takes a child and uses arrow instead of return.","body":["class $1 extends StatelessWidget {","  final Widget child;","  $2","","  const $1({super.key, required this.child, $3});","","  @override","  Widget build(BuildContext context) => $0;","}",""],"scope":"flutter, dart"},"Arrow stateless widget (Flutter)":{"prefix":"astl","description":"Creates a StatelessWidget that uses arrow instead of return.","body":["class $1 extends StatelessWidget {","  $2","","  const $1({super.key,$3});","","  @override","  Widget build(BuildContext context) => $0;","}",""],"scope":"flutter, dart"},"Stateless widget (Flutter)":{"prefix":"stl","description":"Creates a regular StatelessWidget.","body":["class $1 extends StatelessWidget {","  $2","","  const $1({super.key,$3});","","  @override","  Widget build(BuildContext context) {","    return $0;","  }","}",""],"scope":"flutter, dart"},"Inherited scope (Flutter)":{"prefix":"scope","description":"Creates a scope that inherits from the Scope Stateful+Inherited Widget wrapper.","body":["class $1Scope extends Scope {","","  const $1Scope({required super.child, super.key,});","","  static const DelegateAccess<_$1ScopeDelegate> _delegateOf = Scope.delegateOf<$1Scope, _$1ScopeDelegate>;","","  @override","  ScopeDelegate<$1Scope> createDelegate() => _$1ScopeDelegate();","","}","","class _$1ScopeDelegate extends ScopeDelegate<$1Scope> {","","  $0","","}"],"scope":"flutter, dart"},"Stateless bloc scope (Flutter)":{"prefix":"blscope","description":"Creates a stateless scope for BLoC that uses BlocProvider as its InheritedWidget.","body":["class $1Scope extends StatelessWidget {","  final Widget child;","","  const $1Scope({super.key, required this.child,});","","  static const BlocScope<$1Event, $1State, $1Bloc> _scope = BlocScope();","","  @override","  Widget build(BuildContext context) => BlocProvider<$1Bloc>(","        create: (context) => $1Bloc(","          $2Repository: context.repository.$2,","        ),","        child: child,","      );","}"],"scope":"flutter, dart"},"Bloc event (Dart)":{"prefix":"blev","description":"Creates a Freezed bloc event.","body":["const factory $1Event.$2($3) = $1Event$2;","$0"],"scope":"dart"},"Bloc event handler (Dart)":{"prefix":"bleh","description":"Creates a BLoC event handler that is used with destructured events.","body":["Stream<$1State> _$2($3) async* {","  $0","}"],"scope":"dart"},"Config mixin spacing entry (Dart)":{"prefix":"cfgspace","description":"Creates a static configuration spacing mixin entry.","body":["static const double $1Spacing = $2;","$0"],"scope":"dart"},"Bloc states persistent (Dart)":{"prefix":"blstpers","description":"Creates a set of states with persistent value that is present across all states.","body":["const factory $1State.idle({required $1Data? data,}) = $1StateIdle;","","const factory $1State.loading({required $1Data? data,}) = $1StateLoading;","","const factory $1State.success({required $1Data data,}) = $1StateSuccess;","","const factory $1State.error({required $1Data? data, required String description,}) = $1StateError;"],"scope":"dart"},"New dartdoc template (Dart)":{"prefix":"newtmpl","description":"Creates a new dartdoc template with current file's name as its prefix","body":["/// {@template $TM_FILENAME_BASE.${1}}","/// $2","/// {@endtemplate}","$0"],"scope":"dart"},"Retrofit client (Dart)":{"prefix":"retro","description":"Creates a retrofit client.","body":["import 'package:dio/dio.dart';","import 'package:retrofit/retrofit.dart';","","part '$TM_FILENAME_BASE.g.dart';","","@RestApi(baseUrl: \"$1\")","abstract class $2Client {","  factory $2Client(Dio dio, {String? baseUrl}) = _$2Client;","","  $0","}"],"scope":"dart"},"Try catch finally (Dart)":{"prefix":"try","description":"Try-catch-finally block","body":["try {","  $1","} on Object catch (e, s) {","  $2","} finally {","  $0","}"],"scope":"dart"},"Use dartdoc template (Dart)":{"prefix":"usetmpl","description":"Uses existing dartdoc macro with current file's name as its prefix","body":["/// {@macro $TM_FILENAME_BASE.$0}"],"scope":"dart"},"Base class (Dart)":{"prefix":"base","description":"Creates a base class.","body":["class $1Base implements I$1 {","  $0","}"],"scope":"dart"},"Block separator (Dart)":{"prefix":"spr","description":"Comment block separator","body":["// --- ${1} --- //","","$0"],"scope":"dart"},"Implementation (Dart)":{"prefix":"imp","description":"Creates a default implementation for an interface.","body":["class $1 implements I$1 {","  $0","}"],"scope":"dart"},"Config mixin (Dart)":{"prefix":"cfg","description":"Private config mixin used for configuration.","body":["mixin ${1:_Config} {","  static const $2 $3 = $4","  $0","}"],"scope":"dart"},"Interface (Dart)":{"prefix":"inter","description":"Creates an interface.","body":["abstract class I$1 {}"],"scope":"dart"},"Generated part (Dart)":{"prefix":"part","description":"Inserts a part statement for generated code.","body":["part '${TM_FILENAME_BASE}.$1.dart';","","$0"],"scope":"dart"},"Class under interface (Dart)":{"prefix":"clsinter","description":"Creates and interface and a default implementation for it.","body":["abstract class I$1 {}","","class $1 implements I$1 {","  $0","}"],"scope":"dart"},"Bloc states ephemeral (Dart)":{"prefix":"blsteph","description":"Creates a set of states with ephemeral value that is present only in a success state.","body":["const factory $1State.idle() = $1StateIdle;","","const factory $1State.loading() = $1StateLoading;","","const factory $1State.success({required $2 $3,}) = $1StateSuccess;","","const factory $1State.error({required String description,}) = $1StateError;"],"scope":"dart"},"Config mixin entry (Dart)":{"prefix":"cfge","description":"Creates a static constant config mixin entry.","body":["static const $1 $2 = $3;","$0"],"scope":"dart"},"Exceptions union (Dart)":{"prefix":"exceuni","description":"Crease a Freezed union of throwable exception","body":["@freezed","class $1Exception with _$1Exception implements Exception {","  $0","}"],"scope":"dart"},"Try catch on (Dart)":{"prefix":"tryon","description":"Try-catch on clause","body":["on $1 catch (e, s) {","  $0","}"],"scope":"dart"},"Default bloc (Dart)":{"prefix":"bloc","description":"Creates a scaffold for a StreamBloc that contains states, events, and the BLoC itself.","body":["import 'package:freezed_annotation/freezed_annotation.dart';","import 'package:stream_bloc/stream_bloc.dart';","","part '$TM_FILENAME_BASE.freezed.dart';","","// --- States --- //","","@freezed","class $1State with _$$1State {","  $2","}","","// --- Events --- //","","@freezed","class $1Event with _$$1Event {","  $3","}","","// --- BLoC --- //","","class $1Bloc extends StreamBloc<$1Event, $1State> {"," $1Bloc() : super($4);","","  @override","  Stream<$1State> mapEventToStates($1Event event) => event$0;","}"],"scope":"dart"},"Bloc state (Dart)":{"prefix":"blst","description":"Creates a Freezed bloc state.","body":["const factory $1State.$2($3) = $1State$2;","$0"],"scope":"dart"},"Conditional imports (Dart)":{"prefix":"cond","description":"Platform-aware conditional imports.","body":["import '$1/$2_stub.dart'","    if (dart.library.html) '$1/$2_web.dart'","    if (dart.library.io) '$1/$2_io.dart';\n"],"scope":"dart"},"Freezed json serializable generic class (Dart)":{"prefix":"fjsongenclass","description":"Creates a freezed + json_serializable class that uses generic factories","body":["@freezed","@JsonSerializable(genericArgumentFactories: true)","class $1<T$2> with _$$1<T> {","  const factory $1({$0,}) = _$1;","","  factory $1.fromJson(Map<String, Object?> json, T Function(Object?) fromJsonT,) {","    return _$$1FromJson<T>(json, fromJsonT);","  }","}"],"scope":"dart"}}